openapi: 3.0.3
info:
  title: Order Service API
  description: API for processing customer orders, tracking status, and managing order history
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
servers:
  - url: 'http://localhost:8080/api/v1'
    description: Local development server
tags:
  - name: orders
    description: Operations related to customer orders
  - name: events
    description: Event handling for order service

paths:
  /orders:
    post:
      tags:
        - orders
      summary: Create a new order
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - orders
      summary: Get all orders with pagination and filtering
      operationId: getOrders
      parameters:
        - name: customerId
          in: query
          required: false
          schema:
            type: string
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [PENDING, PAYMENT_CONFIRMED, INVENTORY_CONFIRMED, SHIPPED, DELIVERED, CANCELLED]
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 20
        - name: sort
          in: query
          required: false
          schema:
            type: string
            default: "createdAt,desc"
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedOrders'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders/{orderId}:
    get:
      tags:
        - orders
      summary: Get an order by ID
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - orders
      summary: Update an existing order
      operationId: updateOrder
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderUpdateRequest'
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - orders
      summary: Cancel an order
      operationId: cancelOrder
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders/{orderId}/status:
    put:
      tags:
        - orders
      summary: Update order status
      operationId: updateOrderStatus
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderStatusUpdateRequest'
      responses:
        '200':
          description: Order status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid status update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders/customer/{customerId}:
    get:
      tags:
        - orders
      summary: Get order history for a customer
      operationId: getOrderHistory
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Customer order history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedOrders'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /events/payment-confirmation:
    post:
      tags:
        - events
      summary: Handle payment confirmation events
      operationId: handlePaymentConfirmation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentConfirmationEvent'
      responses:
        '200':
          description: Payment confirmation processed
        '400':
          description: Invalid payment confirmation event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /events/inventory-confirmation:
    post:
      tags:
        - events
      summary: Handle inventory confirmation events
      operationId: handleInventoryConfirmation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryConfirmationEvent'
      responses:
        '200':
          description: Inventory confirmation processed
        '400':
          description: Invalid inventory confirmation event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    OrderRequest:
      type: object
      required:
        - customerId
        - items
        - shippingAddress
      properties:
        customerId:
          type: string
          description: ID of the customer placing the order
        items:
          type: array
          description: List of items in the order
          items:
            $ref: '#/components/schemas/OrderItemRequest'
        shippingAddress:
          $ref: '#/components/schemas/Address'
        billingAddress:
          $ref: '#/components/schemas/Address'
        specialInstructions:
          type: string
          description: Special instructions for the order

    OrderItemRequest:
      type: object
      required:
        - productId
        - quantity
        - unitPrice
      properties:
        productId:
          type: string
          description: ID of the product
        quantity:
          type: integer
          format: int32
          minimum: 1
          description: Quantity of the product
        unitPrice:
          type: number
          format: double
          description: Price per unit

    OrderUpdateRequest:
      type: object
      properties:
        shippingAddress:
          $ref: '#/components/schemas/Address'
        billingAddress:
          $ref: '#/components/schemas/Address'
        specialInstructions:
          type: string
          description: Special instructions for the order

    OrderStatusUpdateRequest:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [PENDING, PAYMENT_CONFIRMED, INVENTORY_CONFIRMED, SHIPPED, DELIVERED, CANCELLED]
          description: New status of the order
        reasonCode:
          type: string
          description: Reason code for status change, required for CANCELLED status
        notes:
          type: string
          description: Additional notes about the status update

    Order:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the order
        customerId:
          type: string
          description: ID of the customer who placed the order
        orderNumber:
          type: string
          description: Human-readable order number
        items:
          type: array
          description: List of items in the order
          items:
            $ref: '#/components/schemas/OrderItem'
        status:
          type: string
          enum: [PENDING, PAYMENT_CONFIRMED, INVENTORY_CONFIRMED, SHIPPED, DELIVERED, CANCELLED]
          description: Current status of the order
        totalAmount:
          type: number
          format: double
          description: Total amount of the order
        shippingAddress:
          $ref: '#/components/schemas/Address'
        billingAddress:
          $ref: '#/components/schemas/Address'
        specialInstructions:
          type: string
          description: Special instructions for the order
        createdAt:
          type: string
          format: date-time
          description: Date and time when the order was created
        updatedAt:
          type: string
          format: date-time
          description: Date and time when the order was last updated
        statusHistory:
          type: array
          description: History of status changes
          items:
            $ref: '#/components/schemas/StatusChange'

    OrderItem:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the order item
        productId:
          type: string
          description: ID of the product
        productName:
          type: string
          description: Name of the product
        quantity:
          type: integer
          format: int32
          description: Quantity of the product
        unitPrice:
          type: number
          format: double
          description: Price per unit
        subtotal:
          type: number
          format: double
          description: Subtotal for this item (quantity * unitPrice)
        inventoryStatus:
          type: string
          enum: [PENDING, CONFIRMED, INSUFFICIENT]
          description: Status of inventory reservation

    StatusChange:
      type: object
      properties:
        status:
          type: string
          enum: [PENDING, PAYMENT_CONFIRMED, INVENTORY_CONFIRMED, SHIPPED, DELIVERED, CANCELLED]
          description: Order status
        timestamp:
          type: string
          format: date-time
          description: When the status change occurred
        reasonCode:
          type: string
          description: Reason code for status change
        notes:
          type: string
          description: Additional notes about the status change

    Address:
      type: object
      required:
        - line1
        - city
        - state
        - postalCode
        - country
      properties:
        line1:
          type: string
          description: First line of the address
        line2:
          type: string
          description: Second line of the address
        city:
          type: string
          description: City
        state:
          type: string
          description: State or province
        postalCode:
          type: string
          description: Postal code
        country:
          type: string
          description: Country

    PagedOrders:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        page:
          type: integer
          format: int32
          description: Current page number
        size:
          type: integer
          format: int32
          description: Page size
        totalElements:
          type: integer
          format: int64
          description: Total number of elements
        totalPages:
          type: integer
          format: int32
          description: Total number of pages

    PaymentConfirmationEvent:
      type: object
      required:
        - orderId
        - paymentId
        - status
      properties:
        orderId:
          type: string
          description: ID of the order for which payment was processed
        paymentId:
          type: string
          description: ID of the payment transaction
        status:
          type: string
          enum: [SUCCESSFUL, FAILED]
          description: Payment status
        amount:
          type: number
          format: double
          description: Payment amount
        transactionDate:
          type: string
          format: date-time
          description: Date and time of the payment transaction
        failureReason:
          type: string
          description: Reason for payment failure (if applicable)

    InventoryConfirmationEvent:
      type: object
      required:
        - orderId
        - status
        - items
      properties:
        orderId:
          type: string
          description: ID of the order for which inventory was checked
        status:
          type: string
          enum: [CONFIRMED, PARTIAL, INSUFFICIENT]
          description: Overall inventory status
        items:
          type: array
          description: Status of each ordered item
          items:
            $ref: '#/components/schemas/InventoryItemStatus'
        reservationId:
          type: string
          description: ID of the inventory reservation
        expirationDate:
          type: string
          format: date-time
          description: Expiration date of the inventory reservation

    InventoryItemStatus:
      type: object
      required:
        - productId
        - status
        - requestedQuantity
      properties:
        productId:
          type: string
          description: ID of the product
        status:
          type: string
          enum: [AVAILABLE, PARTIAL, UNAVAILABLE]
          description: Availability status
        requestedQuantity:
          type: integer
          format: int32
          description: Requested quantity
        availableQuantity:
          type: integer
          format: int32
          description: Available quantity
        reason:
          type: string
          description: Reason for partial or unavailable status (if applicable)

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: Timestamp when the error occurred
        status:
          type: integer
          format: int32
          description: HTTP status code
        error:
          type: string
          description: Error type
        message:
          type: string
          description: Error message
        path:
          type: string
          description: Path of the request that caused the error